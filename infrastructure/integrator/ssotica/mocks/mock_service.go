// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/integrator/ssotica/service.go
//
// Generated by this command:
//
//	mockgen -source=infrastructure/integrator/ssotica/service.go -destination=infrastructure/integrator/ssotica/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ssoticadomain "github.com/vfg2006/traffic-manager-api/infrastructure/integrator/ssotica/domain"
	domain "github.com/vfg2006/traffic-manager-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSSOticaIntegrator is a mock of SSOticaIntegrator interface.
type MockSSOticaIntegrator struct {
	ctrl     *gomock.Controller
	recorder *MockSSOticaIntegratorMockRecorder
	isgomock struct{}
}

// MockSSOticaIntegratorMockRecorder is the mock recorder for MockSSOticaIntegrator.
type MockSSOticaIntegratorMockRecorder struct {
	mock *MockSSOticaIntegrator
}

// NewMockSSOticaIntegrator creates a new mock instance.
func NewMockSSOticaIntegrator(ctrl *gomock.Controller) *MockSSOticaIntegrator {
	mock := &MockSSOticaIntegrator{ctrl: ctrl}
	mock.recorder = &MockSSOticaIntegratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSOticaIntegrator) EXPECT() *MockSSOticaIntegratorMockRecorder {
	return m.recorder
}

// CheckConnection mocks base method.
func (m *MockSSOticaIntegrator) CheckConnection(params ssoticadomain.CheckConnectionParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConnection", params)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckConnection indicates an expected call of CheckConnection.
func (mr *MockSSOticaIntegratorMockRecorder) CheckConnection(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnection", reflect.TypeOf((*MockSSOticaIntegrator)(nil).CheckConnection), params)
}

// GetSalesByAccount mocks base method.
func (m *MockSSOticaIntegrator) GetSalesByAccount(params ssoticadomain.GetSalesParams, filters *domain.InsigthFilters) ([]ssoticadomain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByAccount", params, filters)
	ret0, _ := ret[0].([]ssoticadomain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByAccount indicates an expected call of GetSalesByAccount.
func (mr *MockSSOticaIntegratorMockRecorder) GetSalesByAccount(params, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByAccount", reflect.TypeOf((*MockSSOticaIntegrator)(nil).GetSalesByAccount), params, filters)
}
