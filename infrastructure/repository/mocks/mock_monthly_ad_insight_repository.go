// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/repository/monthly_ad_insight.go
//
// Generated by this command:
//
//	mockgen -source=infrastructure/repository/monthly_ad_insight.go -destination=infrastructure/repository/mocks/mock_monthly_ad_insight_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	domain "github.com/vfg2006/traffic-manager-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockMonthlyAdInsightRepository is a mock of MonthlyAdInsightRepository interface.
type MockMonthlyAdInsightRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMonthlyAdInsightRepositoryMockRecorder
	isgomock struct{}
}

// MockMonthlyAdInsightRepositoryMockRecorder is the mock recorder for MockMonthlyAdInsightRepository.
type MockMonthlyAdInsightRepositoryMockRecorder struct {
	mock *MockMonthlyAdInsightRepository
}

// NewMockMonthlyAdInsightRepository creates a new mock instance.
func NewMockMonthlyAdInsightRepository(ctrl *gomock.Controller) *MockMonthlyAdInsightRepository {
	mock := &MockMonthlyAdInsightRepository{ctrl: ctrl}
	mock.recorder = &MockMonthlyAdInsightRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonthlyAdInsightRepository) EXPECT() *MockMonthlyAdInsightRepositoryMockRecorder {
	return m.recorder
}

// DeleteOlderThan mocks base method.
func (m *MockMonthlyAdInsightRepository) DeleteOlderThan(months int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", months)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan.
func (mr *MockMonthlyAdInsightRepositoryMockRecorder) DeleteOlderThan(months any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockMonthlyAdInsightRepository)(nil).DeleteOlderThan), months)
}

// GetAllPeriods mocks base method.
func (m *MockMonthlyAdInsightRepository) GetAllPeriods() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPeriods")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPeriods indicates an expected call of GetAllPeriods.
func (mr *MockMonthlyAdInsightRepositoryMockRecorder) GetAllPeriods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPeriods", reflect.TypeOf((*MockMonthlyAdInsightRepository)(nil).GetAllPeriods))
}

// GetByAccountIDAndPeriod mocks base method.
func (m *MockMonthlyAdInsightRepository) GetByAccountIDAndPeriod(accountID string, date time.Time) (*domain.MonthlyAdInsightEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccountIDAndPeriod", accountID, date)
	ret0, _ := ret[0].(*domain.MonthlyAdInsightEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccountIDAndPeriod indicates an expected call of GetByAccountIDAndPeriod.
func (mr *MockMonthlyAdInsightRepositoryMockRecorder) GetByAccountIDAndPeriod(accountID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccountIDAndPeriod", reflect.TypeOf((*MockMonthlyAdInsightRepository)(nil).GetByAccountIDAndPeriod), accountID, date)
}

// GetByExternalIDAndPeriod mocks base method.
func (m *MockMonthlyAdInsightRepository) GetByExternalIDAndPeriod(externalID string, date time.Time) (*domain.MonthlyAdInsightEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExternalIDAndPeriod", externalID, date)
	ret0, _ := ret[0].(*domain.MonthlyAdInsightEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExternalIDAndPeriod indicates an expected call of GetByExternalIDAndPeriod.
func (mr *MockMonthlyAdInsightRepositoryMockRecorder) GetByExternalIDAndPeriod(externalID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExternalIDAndPeriod", reflect.TypeOf((*MockMonthlyAdInsightRepository)(nil).GetByExternalIDAndPeriod), externalID, date)
}

// GetByPeriodRange mocks base method.
func (m *MockMonthlyAdInsightRepository) GetByPeriodRange(accountID string, startDate, endDate time.Time) ([]*domain.MonthlyAdInsightEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPeriodRange", accountID, startDate, endDate)
	ret0, _ := ret[0].([]*domain.MonthlyAdInsightEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPeriodRange indicates an expected call of GetByPeriodRange.
func (mr *MockMonthlyAdInsightRepositoryMockRecorder) GetByPeriodRange(accountID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPeriodRange", reflect.TypeOf((*MockMonthlyAdInsightRepository)(nil).GetByPeriodRange), accountID, startDate, endDate)
}

// SaveOrUpdate mocks base method.
func (m *MockMonthlyAdInsightRepository) SaveOrUpdate(insight *domain.MonthlyAdInsightEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdate", insight)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdate indicates an expected call of SaveOrUpdate.
func (mr *MockMonthlyAdInsightRepositoryMockRecorder) SaveOrUpdate(insight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdate", reflect.TypeOf((*MockMonthlyAdInsightRepository)(nil).SaveOrUpdate), insight)
}
