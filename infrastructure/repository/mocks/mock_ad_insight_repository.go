// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/repository/ad_insight.go
//
// Generated by this command:
//
//	mockgen -source=infrastructure/repository/ad_insight.go -destination=infrastructure/repository/mocks/mock_ad_insight_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	domain "github.com/vfg2006/traffic-manager-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAdInsightRepository is a mock of AdInsightRepository interface.
type MockAdInsightRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdInsightRepositoryMockRecorder
	isgomock struct{}
}

// MockAdInsightRepositoryMockRecorder is the mock recorder for MockAdInsightRepository.
type MockAdInsightRepositoryMockRecorder struct {
	mock *MockAdInsightRepository
}

// NewMockAdInsightRepository creates a new mock instance.
func NewMockAdInsightRepository(ctrl *gomock.Controller) *MockAdInsightRepository {
	mock := &MockAdInsightRepository{ctrl: ctrl}
	mock.recorder = &MockAdInsightRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdInsightRepository) EXPECT() *MockAdInsightRepositoryMockRecorder {
	return m.recorder
}

// DeleteOlderThan mocks base method.
func (m *MockAdInsightRepository) DeleteOlderThan(days int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", days)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan.
func (mr *MockAdInsightRepositoryMockRecorder) DeleteOlderThan(days any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockAdInsightRepository)(nil).DeleteOlderThan), days)
}

// GetByAccountIDAndDate mocks base method.
func (m *MockAdInsightRepository) GetByAccountIDAndDate(accountID string, date time.Time) (*domain.AdInsightEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccountIDAndDate", accountID, date)
	ret0, _ := ret[0].(*domain.AdInsightEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccountIDAndDate indicates an expected call of GetByAccountIDAndDate.
func (mr *MockAdInsightRepositoryMockRecorder) GetByAccountIDAndDate(accountID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccountIDAndDate", reflect.TypeOf((*MockAdInsightRepository)(nil).GetByAccountIDAndDate), accountID, date)
}

// GetByDateRange mocks base method.
func (m *MockAdInsightRepository) GetByDateRange(accountID string, startDate, endDate time.Time) ([]*domain.AdInsightEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDateRange", accountID, startDate, endDate)
	ret0, _ := ret[0].([]*domain.AdInsightEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDateRange indicates an expected call of GetByDateRange.
func (mr *MockAdInsightRepositoryMockRecorder) GetByDateRange(accountID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDateRange", reflect.TypeOf((*MockAdInsightRepository)(nil).GetByDateRange), accountID, startDate, endDate)
}

// GetByExternalIDAndDate mocks base method.
func (m *MockAdInsightRepository) GetByExternalIDAndDate(externalID string, date time.Time) (*domain.AdInsightEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExternalIDAndDate", externalID, date)
	ret0, _ := ret[0].(*domain.AdInsightEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExternalIDAndDate indicates an expected call of GetByExternalIDAndDate.
func (mr *MockAdInsightRepositoryMockRecorder) GetByExternalIDAndDate(externalID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExternalIDAndDate", reflect.TypeOf((*MockAdInsightRepository)(nil).GetByExternalIDAndDate), externalID, date)
}

// SaveOrUpdate mocks base method.
func (m *MockAdInsightRepository) SaveOrUpdate(insight *domain.AdInsightEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdate", insight)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdate indicates an expected call of SaveOrUpdate.
func (mr *MockAdInsightRepositoryMockRecorder) SaveOrUpdate(insight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdate", reflect.TypeOf((*MockAdInsightRepository)(nil).SaveOrUpdate), insight)
}
