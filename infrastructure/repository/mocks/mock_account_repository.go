// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/repository/account.go
//
// Generated by this command:
//
//	mockgen -source=infrastructure/repository/account.go -destination=infrastructure/repository/mocks/mock_account_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/vfg2006/traffic-manager-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// GetAccountByExternalID mocks base method.
func (m *MockAccountRepository) GetAccountByExternalID(accountExternalID string) (*domain.AdAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByExternalID", accountExternalID)
	ret0, _ := ret[0].(*domain.AdAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByExternalID indicates an expected call of GetAccountByExternalID.
func (mr *MockAccountRepositoryMockRecorder) GetAccountByExternalID(accountExternalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByExternalID", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountByExternalID), accountExternalID)
}

// GetAccountByID mocks base method.
func (m *MockAccountRepository) GetAccountByID(accountID string) (*domain.AdAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", accountID)
	ret0, _ := ret[0].(*domain.AdAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockAccountRepositoryMockRecorder) GetAccountByID(accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountByID), accountID)
}

// ListAccounts mocks base method.
func (m *MockAccountRepository) ListAccounts(availableStatus []domain.AdAccountStatus) ([]*domain.AdAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", availableStatus)
	ret0, _ := ret[0].([]*domain.AdAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockAccountRepositoryMockRecorder) ListAccounts(availableStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccountRepository)(nil).ListAccounts), availableStatus)
}

// ListAccountsMap mocks base method.
func (m *MockAccountRepository) ListAccountsMap() (map[string]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsMap")
	ret0, _ := ret[0].(map[string]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsMap indicates an expected call of ListAccountsMap.
func (mr *MockAccountRepositoryMockRecorder) ListAccountsMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsMap", reflect.TypeOf((*MockAccountRepository)(nil).ListAccountsMap))
}

// SaveOrUpdate mocks base method.
func (m *MockAccountRepository) SaveOrUpdate(account []*domain.AdAccount, businessManagerIDs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdate", account, businessManagerIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdate indicates an expected call of SaveOrUpdate.
func (mr *MockAccountRepositoryMockRecorder) SaveOrUpdate(account, businessManagerIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdate", reflect.TypeOf((*MockAccountRepository)(nil).SaveOrUpdate), account, businessManagerIDs)
}

// SaveOrUpdateBusinessManager mocks base method.
func (m *MockAccountRepository) SaveOrUpdateBusinessManager(bms []*domain.BusinessManager) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateBusinessManager", bms)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOrUpdateBusinessManager indicates an expected call of SaveOrUpdateBusinessManager.
func (mr *MockAccountRepositoryMockRecorder) SaveOrUpdateBusinessManager(bms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateBusinessManager", reflect.TypeOf((*MockAccountRepository)(nil).SaveOrUpdateBusinessManager), bms)
}

// UpdateAccount mocks base method.
func (m *MockAccountRepository) UpdateAccount(account *domain.UpdateAdAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountRepositoryMockRecorder) UpdateAccount(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountRepository)(nil).UpdateAccount), account)
}
