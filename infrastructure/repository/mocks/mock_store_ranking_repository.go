// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/repository/store_ranking.go
//
// Generated by this command:
//
//	mockgen -source=infrastructure/repository/store_ranking.go -destination=infrastructure/repository/mocks/mock_store_ranking_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/vfg2006/traffic-manager-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockStoreRankingRepository is a mock of StoreRankingRepository interface.
type MockStoreRankingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStoreRankingRepositoryMockRecorder
	isgomock struct{}
}

// MockStoreRankingRepositoryMockRecorder is the mock recorder for MockStoreRankingRepository.
type MockStoreRankingRepositoryMockRecorder struct {
	mock *MockStoreRankingRepository
}

// NewMockStoreRankingRepository creates a new mock instance.
func NewMockStoreRankingRepository(ctrl *gomock.Controller) *MockStoreRankingRepository {
	mock := &MockStoreRankingRepository{ctrl: ctrl}
	mock.recorder = &MockStoreRankingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreRankingRepository) EXPECT() *MockStoreRankingRepositoryMockRecorder {
	return m.recorder
}

// GetByAccountID mocks base method.
func (m *MockStoreRankingRepository) GetByAccountID(accountID, month string) (*domain.StoreRankingItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccountID", accountID, month)
	ret0, _ := ret[0].(*domain.StoreRankingItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccountID indicates an expected call of GetByAccountID.
func (mr *MockStoreRankingRepositoryMockRecorder) GetByAccountID(accountID, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccountID", reflect.TypeOf((*MockStoreRankingRepository)(nil).GetByAccountID), accountID, month)
}

// GetStoreRanking mocks base method.
func (m *MockStoreRankingRepository) GetStoreRanking() (*domain.StoreRankingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreRanking")
	ret0, _ := ret[0].(*domain.StoreRankingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreRanking indicates an expected call of GetStoreRanking.
func (mr *MockStoreRankingRepositoryMockRecorder) GetStoreRanking() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreRanking", reflect.TypeOf((*MockStoreRankingRepository)(nil).GetStoreRanking))
}

// SaveOrUpdateStoreRanking mocks base method.
func (m *MockStoreRankingRepository) SaveOrUpdateStoreRanking(rankings []*domain.StoreRankingItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateStoreRanking", rankings)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateStoreRanking indicates an expected call of SaveOrUpdateStoreRanking.
func (mr *MockStoreRankingRepositoryMockRecorder) SaveOrUpdateStoreRanking(rankings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateStoreRanking", reflect.TypeOf((*MockStoreRankingRepository)(nil).SaveOrUpdateStoreRanking), rankings)
}
